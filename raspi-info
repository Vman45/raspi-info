#!/bin/bash

#################################################################################
#                                                                               #
#               _ __ __ _ ___ _ __ (_)     (_)_ __  / _|                        #
#              | '__/ _` / __| '_ \| |_____| | '_ \| |_ / _ \                   #
#              | | | (_| \__ \ |_) | |_____| | | | |  _| (_) |                  #
#              |_|  \__,_|___/ .__/|_|     |_|_| |_|_|  \___/                   #
#                            |_|                                                #
#                                                                               #
#                                                                               #
# MIT License                                                                   #
# Copyright (c) 2019 Massimo Pissarello                                         #
# Permission is hereby granted, free of charge, to any person obtaining a copy  #
# of this software and associated documentation files (the "Software"), to deal #
# in the Software without restriction, including without limitation the rights  #
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell     #
# copies of the Software, and to permit persons to whom the Software is         #
# furnished to do so, subject to the following conditions:                      #
# The above copyright notice and this permission notice shall be included in    #
# all copies or substantial portions of the Software.                           #
#                                                                               #
#################################################################################


##### VARIABLES AT BEGINNING FOR CORRECT MEASUREMENT!!!
# CPU frequency
CPUNOW=`cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_cur_freq`
# Temperature
CPUTEMP=$(cat /sys/class/thermal/thermal_zone0/temp)
#######################################################

clear

figlet "raspi-info  1 .1"
echo

# System
echo -e '\e[32m'"OS: `lsb_release -d | awk '/Description:/ {print $2, $3, $4, $5}'` / Architecture: `uname -m`"
echo -e "Kernel version: `uname -r` (`uname -v`)"

# Uptime and load average
echo -e "Load average (1m, 5m, 15m)`uptime | awk -F'[a-z]:' '{ print $2}'` / Uptime `uptime -p | sed "s/^[^ ]* //"`"
echo -e '\e[0m'

# Temperature
if [ "$CPUTEMP" -lt  "48000" ]; then
	echo -e '\e[36m'"CPU `vcgencmd measure_temp` ---> LOW TEMPERATURE"'\e[0m'; fi
if [ "$CPUTEMP" -gt  "48000" ] && [ "$CPUTEMP" -lt  "56000" ]; then
	echo -e '\e[33m'"CPU `vcgencmd measure_temp` ---> NORMAL TEMPERATURE"'\e[0m'; fi
if [ "$CPUTEMP" -gt  "56000" ] && [ "$CPUTEMP" -lt  "64000"  ]; then
	echo -e '\e[33m\e[1m'"CPU `vcgencmd measure_temp` ---> NORMAL-HIGH TEMPERATURE"'\e[0m'; fi
if [ "$CPUTEMP" -gt  "64000" ] && [ "$CPUTEMP" -lt  "72000" ]; then
	echo -e '\e[31m'"CPU `vcgencmd measure_temp`---> HIGH TEMPERATURE!"'\e[0m'; fi
if [ "$CPUTEMP" -gt  "72000" ];  then
	echo -e '\e[31m\e[1m'"CPU `vcgencmd measure_temp` ---> PLEASE SHUTDOWN THE SERVER: TEMPERATURE IS VERY HIGH!"'\e[0m'; fi

# Volt and RAM
echo
echo -e '\e[96m'"CPU `vcgencmd measure_volts core` / RAM `vcgencmd measure_volts sdram_p` / RAM dedicated to `vcgencmd get_mem arm` / RAM dedicated to `vcgencmd get_mem gpu`"

# CPU frequency
CPUMIN=`cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_min_freq`
CPUMAX=`cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_max_freq`
echo -e "CPU has `nproc` core and frequency now is `expr $CPUNOW / 1000` MHz (range is from `expr $CPUMIN / 1000` MHz to `expr $CPUMAX / 1000` MHz)"
echo

# Complete RAM data
echo -e '\e[0m'"RAM usage and Swap:"
echo -e '\e[33m'"`free -m`"
echo -e '\e[0m'

# List USB
echo -e '\e[0m'"USB devices:"
echo -e '\e[36m'"`lsusb`"
echo -e '\e[0m'

# Check Internet and IP
EXTIP=$(dig TXT +short o-o.myaddr.l.google.com @ns1.google.com | sed -e 's/^"//' -e 's/"$//')
ping -c 1 google.com &> /dev/null && echo -e "\e[32mInternet connected with IP \e[1m$EXTIP \e[0m\e[91m(traceroute hops: `traceroute $EXTIP | wc -l`)" && \
echo -e '\e[0m'"\e[95m`$(traceroute $EXTIP > /tmp/trace) && tail -n +2 /tmp/trace`" && \
echo -e '\e[32m'Whois: '\e[94m'`whois $EXTIP | grep -m 1 owner: | awk '{print $2,$3,$4,$5}'` \
	"\b"`whois $EXTIP | grep -m 1 netname: | awk '{print $2,$3,$4,$5}'` \
	'\e[32m'Address: '\e[94m'`whois $EXTIP | grep -m 2 address: | awk '{print $2,$3,$4,$5,$6,$7,$8,$9}'` \
	'\e[32m'Country: '\e[94m'`whois $EXTIP | grep -m 1 country: | awk '{print $2}'` || \
	echo -e "\e[31m\e[1mInternet not connected"

# Check IP, whois, gateway.....
INTERFACE=$(ip -o -f inet addr show | awk '/scope global/ {print $2, $4}')
BROADCAST=$(ip -o -f inet addr show | awk '!/scope host lo/' | awk '!/scope global wg/ {print $2, $6}')
GATEWAYIP=$(route -n | grep -m 2 "UG" | tac | awk '{print $8, $2}')
DOMAIN=$(cat /etc/resolv.conf | grep domain | awk '{print $2}')
NAMESERVERS=$(cat /etc/resolv.conf | grep nameserver | awk '{print $2}')

# Create interfaces
echo
echo -e '\e[0m\e[1m'"Internal IP:" '\e[36m\e[1m'$INTERFACE
echo "`ip -o -f inet addr show | awk '/scope global/ {print $2}'`" > /tmp/interfaces

# MAC address
printf '\e[0m'"MAC address: "
while read -r IFACE; do
	printf '\e[36m'$IFACE && printf " `cat /sys/class/net/$IFACE/address` "
		if [[ $IFACE = "tun0" ]]; then
			echo -e "\bnot available\c"; fi
		if [[ $IFACE = "wg0" ]]; then
			echo -e "\bnot available\c"; fi
done < /tmp/interfaces
echo

# Traffic data
printf '\e[0m'"Traffic data: "
while read -r IFACE; do
	RX=`cat /sys/class/net/$IFACE/statistics/rx_bytes`
	TX=`cat /sys/class/net/$IFACE/statistics/tx_bytes`
	printf '\e[36m'$IFACE && printf " RX=`expr $RX / 1048576`Mb-"
	printf "TX=`expr $TX / 1048576`Mb "
done < /tmp/interfaces
echo

# Speed
sed -i '/wg0/d' /tmp/interfaces
echo -e -n '\e[0m'"Speed: "'\e[36m'
while read -r IFACE; do
	echo -n "$IFACE `ethtool $IFACE | grep -i speed | awk '{print $2}'` "
done < /tmp/interfaces
echo

# Print connection data
echo -e '\e[0m'"Broadcast (or peer):" '\e[36m'$BROADCAST
echo -e '\e[0m'"Gateway:" '\e[36m'$GATEWAYIP
	if [[ $DOMAIN = "" ]]; then
	echo -e '\e[0m'"Domain: " '\e[36m'"\bnot available\c" && echo; else
	echo -e '\e[0m'"Domain:" '\e[36m'$DOMAIN; fi
stringarray=($NAMESERVERS) && echo -e -n '\e[0m'"Name Servers:" '\e[36m'
for i in "${stringarray[@]}"; do
	echo -n "$i (ping: `ping -c 1 $i | awk -F '/' 'END {print $5}'` ms) "
done
echo

# Wireguard
if [[ -f "/etc/wireguard/wg0.conf" ]]; then
	if [[ -z `wg` ]]; then
		:
	else
		echo && echo -e '\e[33m'"Wireguard: " && echo -e '\e[0m'"Public key: "'\e[36m'"`wg | grep "public key" | awk '{print $3}'`"
		echo -e '\e[0m'"Listening port: "'\e[36m'"`wg show | grep "listening port" | awk '{print $3}'`"
		echo -e '\e[0m'"Peer: "'\e[36m'"`wg | grep peer | awk '{print $2}'`"
		echo -e '\e[0m'"Endpoint: "'\e[36m'"`wg | grep endpoint | awk '{print $2}'`"
		echo -e '\e[0m'"Allowed IP: "'\e[36m'"`wg | grep "allowed ips" | awk '{print $3}'`"
		echo -e '\e[0m'"Latest handshake: "'\e[36m'"`wg | grep "latest handshake" | awk '{print $3,$4,$5,$6,$7,$8,$9,$10,$11}'`"
	fi
fi
echo

# Ping various server
echo -e '\e[0m'"Time to ping world common servers and DNS:"
echo -e '\e[94m'"google.com `ping -c 1 google.com | tail -c 23 | head -c 4` ms / youtube.com `ping -c 1 youtube.com | tail -c 23 | head -c 4` ms / \
wikipedia.com `ping -c 1 wikipedia.com | tail -c 23 | head -c 4` ms / amazon.com `ping -c 1 amazon.com | tail -c 23 | head -c 4` ms"
echo -e "twitter.com `ping -c 1 twitter.com | tail -c 23 | head -c 4` ms / facebook.com `ping -c 1 facebook.com | tail -c 23 | head -c 4` ms / \
instagram.com `ping -c 1 instagram.com | tail -c 23 | head -c 4` ms / vk.com `ping -c 1 vk.com | tail -c 23 | head -c 4` ms"
echo -e "DNS Google (8.8.8.8) `ping -c 1 8.8.8.8 | tail -c 23 | head -c 4` ms / DNS OpenDNS (208.67.222.222) `ping -c 1 208.67.222.222 | tail -c 23 | head -c 4` ms / DNS CloudFlare (1.1.1.1) `ping -c 1 1.1.1.1 | tail -c 23 | head -c 4` ms"
echo -e '\e[32m'

# File system
df -h | grep -v "tmpfs"

# List all sd
echo
fdisk -l | grep Linux | awk '/\/dev\/mm/ {print $1}' > /tmp/sd
fdisk -l | grep Linux | awk '/\/dev\/sd/ {print $1}' >> /tmp/sd
while read SD; do
echo -e '\e[33m'"Partition "$SD
echo -e -n '\e[96m'`tune2fs -l $SD | grep Filesystem\ created`"	"`tune2fs -l $SD | grep Last\ mount\ time`
echo && echo `tune2fs -l $SD | grep Last\ checked`"		"`tune2fs -l $SD | grep Mount\ count`"		"`tune2fs -l $SD | grep Filesystem\ state`
echo -e `tune2fs -l $SD | grep Maximum\ mount`"		"`tune2fs -l $SD | grep Check\ interval`"		"'\e[91m'`tune2fs -l $SD | grep Lifetime`
done < /tmp/sd
echo -e '\e[0m'

# Directory used space
BASEDIR=/
NUMFOL=10
count=1
echo -e "These are the ${NUMFOL} biggest directories and files located in your RaspberryPi:"
du -a --max-depth=3 -x ${BASEDIR} | sort -rn | sed "1d" | head -"${NUMFOL}" |
while read size ndir; do
	size="$(( size / 1024 ))"
	echo -e '\e[95m'"Number ${count}: ${ndir} is ${size} Mb"
	((count++))
done
echo -e '\e[0m'

# Last login
NUMLOGIN=5
echo -e '\e[0m'"Last $NUMLOGIN users login:"'\e[33m'
last -F -n $NUMLOGIN | grep -v "wtmp"

# About date
echo -e '\e[36m'"\c" && ncal -3 -M
echo && echo -e '\e[32m'"Time now is `date +"%H:%M:%S"` in `timedatectl | awk '/Time zone:/ {print $3, $4, $5}'`"
echo -e "Days from beginning of year `date +"%j"` / Weeks from beginning of year `date +"%W"`"'\e[91m\e[1m'
echo -e '\e[0m'

# Tips and random color for fitglet
TIP=/usr/local/lib/raspi-info/shell-tips
FIGLETCOLOR=`shuf -i91-96 -n1`
echo -e '\e[44m\e[1m'" Shell tip: `shuf -n 1 $TIP` "'\e[0m\e['$FIGLETCOLOR'm'

# Print hostname
figlet `hostname -s`
echo -e '\e[0m'"\c"
echo
